# üîç Verificador de Deploy de GitHub Packages
# Script para monitorear el progreso del deploy de RationalBESA

Write-Host "üöÄ Verificando deploy de RationalBESA en GitHub Packages" -ForegroundColor Cyan
Write-Host "================================================" -ForegroundColor Cyan
Write-Host ""

# Funci√≥n para verificar si el paquete est√° disponible
function Test-GitHubPackage {
    param(
        [string]$GroupId = "io.github.iscoutb",
        [string]$ArtifactId = "rational-besa", 
        [string]$Version = "3.5"
    )
    
    Write-Host "üì¶ Verificando disponibilidad del paquete..." -ForegroundColor Yellow
    Write-Host "   GroupId: $GroupId" -ForegroundColor Gray
    Write-Host "   ArtifactId: $ArtifactId" -ForegroundColor Gray  
    Write-Host "   Version: $Version" -ForegroundColor Gray
    Write-Host ""
    
    try {
        # Intentar resolver la dependencia
        $result = & mvn dependency:get -Dartifact="$GroupId`:$ArtifactId`:$Version" -B -q 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ ¬°PAQUETE ENCONTRADO!" -ForegroundColor Green
            Write-Host "   RationalBESA 3.5 est√° disponible en GitHub Packages" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚è≥ Paquete a√∫n no disponible" -ForegroundColor Yellow
            Write-Host "   Esto es normal si el deploy est√° en progreso..." -ForegroundColor Gray
            return $false
        }
    } catch {
        Write-Host "‚è≥ Paquete a√∫n no disponible" -ForegroundColor Yellow
        return $false
    }
}

# Funci√≥n para verificar el estado de GitHub Actions
function Show-GitHubActionsInfo {
    Write-Host "üîó Enlaces √∫tiles para monitoreo:" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "   üìä GitHub Actions:" -ForegroundColor White
    Write-Host "      https://github.com/ISCOUTB/RationalBESA/actions" -ForegroundColor Blue
    Write-Host ""
    Write-Host "   üì¶ GitHub Packages:" -ForegroundColor White  
    Write-Host "      https://github.com/ISCOUTB/RationalBESA/packages" -ForegroundColor Blue
    Write-Host ""
    Write-Host "   üîç √öltimo commit:" -ForegroundColor White
    try {
        $lastCommit = git log --oneline -1
        Write-Host "      $lastCommit" -ForegroundColor Gray
    } catch {
        Write-Host "      No disponible" -ForegroundColor Gray
    }
    Write-Host ""
}

# Funci√≥n principal de monitoreo
function Start-DeployMonitoring {
    $maxAttempts = 12  # 12 intentos = 6 minutos con intervalos de 30s
    $attempt = 0
    $interval = 30  # segundos
    
    Show-GitHubActionsInfo
    
    Write-Host "üïê Iniciando monitoreo del deploy..." -ForegroundColor Cyan
    Write-Host "   (Verificando cada $interval segundos por m√°ximo $($maxAttempts * $interval / 60) minutos)" -ForegroundColor Gray
    Write-Host ""
    
    while ($attempt -lt $maxAttempts) {
        $attempt++
        
        Write-Host "üîÑ Intento $attempt/$maxAttempts..." -ForegroundColor Yellow
        
        if (Test-GitHubPackage) {
            Write-Host ""
            Write-Host "üéâ ¬°DEPLOY COMPLETADO EXITOSAMENTE!" -ForegroundColor Green
            Write-Host ""
            Write-Host "üìù Para usar RationalBESA en tus proyectos:" -ForegroundColor Cyan
            Write-Host @"
<dependency>
    <groupId>io.github.iscoutb</groupId>
    <artifactId>rational-besa</artifactId>
    <version>3.5</version>
</dependency>
"@ -ForegroundColor White
            Write-Host ""
            return $true
        }
        
        if ($attempt -lt $maxAttempts) {
            Write-Host "   ‚è≥ Esperando $interval segundos antes del siguiente intento..." -ForegroundColor Gray
            Start-Sleep -Seconds $interval
            Write-Host ""
        }
    }
    
    Write-Host "‚ö†Ô∏è Tiempo de espera agotado" -ForegroundColor Yellow
    Write-Host "   El deploy puede tomar m√°s tiempo del esperado." -ForegroundColor Gray
    Write-Host "   Verifica manualmente en GitHub Actions:" -ForegroundColor Gray
    Write-Host "   https://github.com/ISCOUTB/RationalBESA/actions" -ForegroundColor Blue
    Write-Host ""
    return $false
}

# Verificaci√≥n inicial
Write-Host "üìã Verificaci√≥n inicial..." -ForegroundColor Cyan

# Verificar si ya est√° disponible
if (Test-GitHubPackage) {
    Write-Host ""
    Write-Host "‚úÖ RationalBESA ya est√° disponible en GitHub Packages" -ForegroundColor Green
    exit 0
}

Write-Host ""
Write-Host "üöÄ El paquete a√∫n no est√° disponible. Iniciando monitoreo..." -ForegroundColor Yellow
Write-Host ""

# Iniciar monitoreo
Start-DeployMonitoring
